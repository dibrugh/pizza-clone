generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)

    // what social network user used for authorization
    provider   String?
    providerId String?

    // user can have one cart
    cart             Cart?
    // user can have many orders
    orders           Order[]
    // user can have one verification code
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id       Int    @id @default(autoincrement())
    name     String
    imageUrl String

    // products belong to one category
    category    Category         @relation(fields: [categoryId], references: [id])
    categoryId  Int
    // products could have many ingredients
    ingredients Ingredient[]
    // products could have many product variations
    variants    ProductVariant[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariant {
    id Int @id @default(autoincrement())

    price        Int
    size         Int?
    pizzaVariant Int?

    // one product variation belongs to one product
    product   Product @relation(fields: [productId], references: [id])
    productId Int

    cartItems CartItem[]
}

model Ingredient {
    id       Int    @id @default(autoincrement())
    name     String
    price    Int
    imageUrl String

    // ingredients could belong to many products
    products Product[]

    // ingredients could belong to many product variations
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id     Int   @id @default(autoincrement())
    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalAmount Int        @default(0)
    // one cart has many cart items
    items       CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id               Int            @id @default(autoincrement())
    // one cart item belongs to one product
    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int
    // one cart item belongs to one cart
    cart             Cart           @relation(fields: [cartId], references: [id])
    cartId           Int

    quantity    Int          @default(1)
    // item could have additional ingredients
    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    // order might be created by unauthenticated user
    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalAmount Int         @default(0)
    status      OrderStatus
    // payment system identifier, like youmoney, stripe, etc
    payementId  String?

    items Json

    // user could be another person than the one who placed the order
    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    // one user must have unique verification codes
    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
